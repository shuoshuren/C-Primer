11使用类
要重载运算符，需要使用被称为运算符函数的特殊函数形式，运算符函数的格式：
operator op(argument-list)
例如：operator+()重载+运算符，operator*（）重载*运算符。op必须是有效的c++运算符，不能虚构一个新的符号。

注意：
不要返回指向局部变量或者临时对象的引用。函数执行完毕，局部变量和临时对象将消失，引用将指向不存在的数据。

11.2.1添加加法运算符
在类中添加重载的加法运算符，只需要将sum（）的名称改为operator+（）即可，和sum（）一样，operator+（）由类对象调用，将第二个类对象作为参数，返回一个类对象。
可以采用operator+()或者运算符表示法进行调用。
eg：total = coding.operator+(fixing);
或者total = coding+fixing;
在运算符表示法中，运算符左侧的对象为调用对象，运算符右边的对象是作为参数被传递的对象。

11.2.2重载限制
1.重载的运算符不必是成员函数，但必须至少有一个操作数是用户定义的类型。这将防止用户为标准类型重载运算符。例如：不能将（-）重载为计算两个double值的和
2.使用运算符时不能违反运算符原来的语句规则。例如：不能将求模（%）重载为使用一个操作数。同样，不能修改运算符的优先级。
3.不能创建新的运算符。例如，不能定义operator**（）函数来表示求幂。
4.不能重载下面的运算符：sizeof（），“.”,"*","::","?:"，“typeid”,"const_cast","dynamic_cast","reinterpret_cast","static_cast"
5.大多数运算符都可以通过成员或非成员函数进行重载，但下面的运算符只能通过成员函数进行重载："=","()","[]","->"

11.3友元
c++控制对类对象私有部分的访问，通常，共有类方法提供唯一的访问途径，c++中提供了另外一种形式发访问权限：友元。
友元有3种：友元函数，友元类，友元成员函数。
通过让函数成为类的友元，可以赋予该函数与类的成员函数相同的访问权限。

11.3.1创建友元
创建友元函数的第一步是将其原型放在类声明中，并在函数原型声明前加上关键字friend：
friend Time operator*(double m,const Time &t);
该原型意味着：
1.虽然operator*()函数是在类声明中声明的，但它不是成员函数，因此不能使用成员运算符来调用；
2.虽然operator*()函数不是成员函数，但是它与成员函数的访问权限相同。
第二步：编写函数定义。因为它不是成员函数，所以不要使用限定符，另外，不要在定义中使用friend关键字。

如果要为类重载运算符，并将非类的项作为其第一个操作数，则可以用友元函数来反转操作数的顺序。

11.3.2常用的友元：重载<<运算符
可以对<<运算符进行重载，使之能与cout一起来显示对象的内容。
1.<<的第一种重载版本
要使Time类支持使用cout，必须使用友元函数。返回值类型为void。eg：cout<<time.
2.<<的第二种重载版本
要支持std::cout一样的输出，将返回类型改为ostream &.

11.4重载运算符：作为成员函数还是非成员函数
对于很多运算符来说，可以选择使用成员函数或非成员函数来实现运算符重载。一般来说，非成员函数应该是友元函数。
对于成员函数来说，一个操作数通过this指针隐式地传递，一个操作数作为函数参数显式地传递；对于友元函数来说，两个操作数都作为参数来传递。

随机数：标准ANSIC库中有一个rand()函数，它返回一个从0到某个值之间的随机整数。用一个初始种子值获取随机数，该随机数将用作下一次函数调用的种子。
srand()函数允许覆盖默认的种子值，重新启动另一个随机数序列。
time(0)函数返回当前时间，通常为从某一个日期开始的秒数。

11.6类的自动转换和强制类型转换
c++中新增了关键字explicit（明确的），用于关闭这种自动转换类型。

创建转换函数：
格式：operator typeName（）;
注意：
转换函数必须是类方法；
转换函数不能指定返回类型；
转换函数不能有参数。
typeName指出了要转换成的类型，因此不需要指定返回类型。转换函数是类方法意味着：需要通过类对象来调用，从而告知函数要转的值，因此函数不需要参数。



